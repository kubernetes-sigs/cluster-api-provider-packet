# workflow to release assets as part of the release

on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset
env:
  IMAGENAME: packethost/cluster-api-provider-packet
  KUBEBUILDER_DIR: /tmp/kubebuilder_install

jobs:
  readiness:
    name: check for appropriate image
    runs-on: ubuntu-latest
    steps:
    - name: Set version
      id: get_version
      run: | 
        echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        echo "COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
    - name: information
      run: echo "checking for existence of image ${IMAGENAME}:${COMMIT}. If it does not exist, this will fail; wait for an earlier PR merge action to complete and re-run this job."
    - name: docker login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: check for docker image on hub
      run: docker buildx imagetools inspect ${IMAGENAME}:${COMMIT}
    - name: report
      run: echo "ready for release; the docker image ${IMAGENAME}:${COMMIT} is available"

  release:
    name: Upload Release Asset
    needs:
    - readiness
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: kubebuilder
        run: make kubebuilder KUBEBUILDER_DIR=${KUBEBUILDER_DIR} # we use this dir because /usr/local/kubebuilder is protected
      - name: manifest
        run: make manifest KUBEBUILDER_DIR=${KUBEBUILDER_DIR} # we use this dir because /usr/local/kubebuilder is protected
        env:
          KUBEBUILDER_ASSETS: ${{ env.KUBEBUILDER_DIR }}/bin
      - name: Get the version
        id: get_version
        run: | 
          echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
      - name: Generate Release Notes
        run: |
          release_notes=$(gh api repos/{owner}/{repo}/releases/generate-notes -F tag_name=${{ github.ref }} --jq .body)
          echo 'RELEASE_NOTES<<EOF' >> $GITHUB_ENV
          echo "${release_notes}" >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          release_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
      - name: Upload cluster-template
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         # This pulls from the CREATE RELEASE step above, referencing it's ID to get
         # its outputs object, which include a `upload_url`. See this blog post for
         # more info:
         # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/release/infrastructure-packet/${{ env.VERSION }}/cluster-template.yaml
          asset_name: cluster-template.yaml
          asset_content_type: application/yaml
      - name: Upload clusterctl
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/release/infrastructure-packet/${{ env.VERSION }}/clusterctl.yaml
          asset_name: clusterctl.yaml
          asset_content_type: application/yaml
      - name: Upload infrastructure-components
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/release/infrastructure-packet/${{ env.VERSION }}/infrastructure-components.yaml
          asset_name: infrastructure-components.yaml
          asset_content_type: application/yaml
      - name: Upload infrastructure-components
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: out/release/infrastructure-packet/${{ env.VERSION }}/metadata.yaml
          asset_name: metadata.yaml
          asset_content_type: application/yaml

  images:
    runs-on: ubuntu-latest
    needs:
    - readiness
    steps:
    - name: docker login
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Set version and imagename
      id: get_version
      run: | 
        echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV
        echo "COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
    - name: get-image
      run: docker image pull ${IMAGENAME}:${COMMIT}
    - name: release-latest
      run: | 
        docker tag ${IMAGENAME}:${COMMIT} ${IMAGENAME}:latest
        docker push ${IMAGENAME}:latest
    - name: release-semver
      run: | 
        docker tag ${IMAGENAME}:${COMMIT} ${IMAGENAME}:${VERSION}
        docker push ${IMAGENAME}:${VERSION}
